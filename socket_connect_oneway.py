'''
import socket

#Class to define a robot in a 3D environment
class Socket:

    #Constructor of the class
    def __init__(self):
        #socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        #socket.bind(('', 15555))

        #while True:
        #    socket.listen(5)
        #    client, address = socket.accept()
        #    print ("{} connected".format( address ))
        #    response = client.recv(255)
        #    if response != "":
        #        print (response)
        #print ("Close")
        #client.close()
        #stock.close()
        buf=1024
        hote = "192.168.1.25"
        port = 30000
        connected = True
        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        sock.connect((hote, port))
        print ("Connection on {}".format(port))

        sock.send(b"Hello!")
        while connected:
            try:
                # réception et affichage de la réponse
                reponse, adr = sock.recvfrom(buf)
                print ("=> %s" % reponse)
            except:
                print ("connection closed")
                connected = False

        print ("Close")
        sock.close()

'''

import socket
import time



HOST = "192.168.0.9"   # The remote host



PORT = 30002           # The same port as used by the server

Pattern_Pose = ['p[0.378471,-0.0698336,0.0328138,-2.24743,2.17749,-0.0681799]', 'p[0.413531,-0.0694946,0.032826,-2.24743,2.17747,-0.0681724]', 'p[0.448591,-0.0691556,0.0328396,-2.24742,2.17745,-0.0681648]', 'p[0.483651,-0.0688166,0.0328532,-2.24742,2.17743,-0.0681572]', 'p[0.378747,-0.0357429,0.0328151,-2.24744,2.17747,-0.0681689]', 'p[0.413798,-0.0354022,0.0328244,-2.24743,2.17746,-0.0681594]', 'p[0.448849,-0.0350616,0.0328351,-2.24743,2.17746,-0.0681499]', 'p[0.483899,-0.0347209,0.0328459,-2.24742,2.17745,-0.0681404]', 'p[0.379023,-0.00165228,0.0328161,-2.24745,2.17746,-0.068158]', 'p[0.414065,-0.00130991,0.0328228,-2.24744,2.17746,-0.0681465]', 'p[0.449106,-0.000967569,0.0328307,-2.24743,2.17746,-0.068135]', 'p[0.484147,-0.000625227,0.0328385,-2.24742,2.17746,-0.0681235]', 'p[0.379299,0.0324384,0.0328171,-2.24745,2.17744,-0.068147]', 'p[0.414331,0.0327824,0.0328212,-2.24744,2.17746,-0.0681335]', 'p[0.449364,0.0331264,0.0328262,-2.24744,2.17747,-0.0681201]', 'p[0.484396,0.0334705,0.0328312,-2.24743,2.17748,-0.0681067]', 'p[0.379575,0.066529,0.0328181,-2.24746,2.17743,-0.068136]', 'p[0.414598,0.0668747,0.0328196,-2.24745,2.17745,-0.0681206]', 'p[0.449621,0.0672204,0.0328217,-2.24744,2.17747,-0.0681052]', 'p[0.484644,0.0675662,0.0328238,-2.24743,2.17749,-0.0680898]', 'p[0.379851,0.10062,0.032819,-2.24747,2.17742,-0.068125]', 'p[0.414865,0.100967,0.032818,-2.24746,2.17745,-0.0681076]', 'p[0.449878,0.101314,0.0328172,-2.24744,2.17748,-0.0680903]', 'p[0.484892,0.101662,0.0328165,-2.24743,2.1775,-0.068073]', 'p[0.380127,0.13471,0.03282,-2.24748,2.1774,-0.068114]', 'p[0.415131,0.135059,0.0328164,-2.24746,2.17744,-0.0680947]', 'p[0.450136,0.135408,0.0328128,-2.24745,2.17748,-0.0680754]', 'p[0.485141,0.135758,0.0328091,-2.24743,2.17752,-0.0680561]', 'p[0.380402,0.168801,0.0328209,-2.24748,2.17739,-0.068103]', 'p[0.415398,0.169152,0.0328148,-2.24747,2.17744,-0.0680817]', 'p[0.450393,0.169502,0.0328083,-2.24745,2.17748,-0.0680605]', 'p[0.485389,0.169853,0.0328018,-2.24744,2.17753,-0.0680393]']
#offset

s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
s.connect((HOST, PORT))


  


#s.send(b"set_digital_out(2,False)" + "\n".encode('ascii'))
#s.send (b"movej([-0.5405182705025187, -2.350330184112267, -1.316631037266588, -2.2775736604458237, 3.3528323423665642, -1.2291967454894914], a=1.3962634015954636, v=1.0471975511965976)" + "\n".encode('ascii'))

    
    # Move to Barcode Scan position
    #s.send (b"movej([0.7871907692279203, -1.5103761085131069, -2.2033988364794155, -1.024165455495016, 1.5907973051071167, 0.7398521304130554], a=1.3962634015954636, v=1.0471975511965976)" + "\n".encode('ascii'))

    #time.sleep(4)

    # Move to Barcode Camera position
    #s.send (b" movej([0.41085015533560754, -1.2924395451082678, -1.8405188490976556, -1.5889028464373958, 1.58100740589828, 0.4406203150331578], a=1.3962634015954636, v=1.0471975511965976)" + "\n".encode('ascii'))

'''
print(Pattern_Pose[0])
command = " movej(" + Pattern_Pose[0] + ", a=1.3962634015954636, v=1.0471975511965976)"  + "\n"
print(command)
command = bytes(" movej(" + Pattern_Pose[0] + ", a=1.3962634015954636, v=1.0471975511965976)"  + "\n", 'utf8')
print(command)
test = bytes(Pattern_Pose[0], 'utf8')
print(test)
print(type(test))
s.send (command)
'''


count = 0

while count < 32 :
    # move to pattern position  
    command = bytes(" movej(" + Pattern_Pose[count] + ", a=1.3962634015954636, v=1.0471975511965976)"  + "\n", 'utf8')
    s.send (command)
    if count + 1 % 4 == 0:
        time.sleep(3)
    else:
        time.sleep(2)
    count += 1








s.close()
